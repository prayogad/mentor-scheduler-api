// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique @db.VarChar(100)
  password String  @db.VarChar(100)
  name     String  @db.VarChar(100)
  phone    String  @db.VarChar(20)
  token    String? @unique @db.VarChar(100)
  role     String  @db.VarChar(7)

  mentor_profile  MentorProfile?
  mentor_sessions MentorSession[]
  booked_sessions BookedSession[]

  @@map("users")
}

model MentorProfile {
  id        Int     @id @default(autoincrement())
  mentor_id Int     @unique
  bio       String? @db.Text
  field     String? @db.VarChar(100)
  mentor    User    @relation(fields: [mentor_id], references: [id], onDelete: Cascade)

  @@map("mentor_profiles")
}

model MentorSession {
  id          Int      @id @default(autoincrement())
  scheduledAt DateTime @db.DateTime(0)
  quota       Int
  mentor_id   Int

  mentor          User            @relation(fields: [mentor_id], references: [id])
  booked_sessions BookedSession[]

  @@map("mentor_sessions")
}

model BookedSession {
  session_id Int
  student_id Int
  booked_at  DateTime @default(now())

  student User          @relation(fields: [student_id], references: [id])
  session MentorSession @relation(fields: [session_id], references: [id])

  @@id([session_id, student_id])
  @@map("booked_sessions")
}
